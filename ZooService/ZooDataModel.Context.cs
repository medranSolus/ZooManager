//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZooService
{
    using System.Linq;
    using System.Data.Entity;
    using System.Collections.Generic;
    using System;

    public partial class ZooContext : DbContext
    {
        public ZooContext() : base("name=ZooContext")
        {
        }

        public bool ModifyModel<T>(T model) where T : ZooDataModel
        {
            T dbModel = Set<T>().Find(model.ID);
            if (dbModel != null)
            {
                dbModel.Assign(model);
                try
                {
                    SaveChanges();
                    return true;
                }
                catch (Exception e)
                {
                    Logger.LogError($"Exception modifying model! Exception: {e.ToString()}", GetType(), $"ModifyModel(model: {model})");
                }
            }
            return false;
        }

        public bool AddModel<T>(T model) where T : ZooDataModel
        {
            try
            {
                if (model != null)
                {
                    Set<T>().Add(model);
                    SaveChanges();
                    return true;
                }
            }
            catch (Exception e)
            {
                Logger.LogError($"Exception adding model! Exception: {e.ToString()}", GetType(), $"AddModel(model: {model})");
            }
            return false;
        }

        public virtual Tuple<bool, byte> DeleteAnimal(int id)
        {
            Animal animal = Animals.SingleOrDefault(a => a.ID == id);
            bool succes = false;
            if (animal != null)
            {
                Animals.Remove(animal);
                try
                {
                    SaveChanges();
                    succes = true;
                }
                catch (Exception e)
                {
                    Logger.LogError($"Exception removing animal! Exception: {e.ToString()}", GetType(), $"DeleteAnimal(id: {id})");
                }
            }
            return new Tuple<bool, byte>(succes, (byte)ModelType.Model);
        }

        public virtual Tuple<bool, byte> DeleteAttraction(int id)
        {
            Attraction attraction = Attractions.SingleOrDefault(a => a.ID == id);
            bool succes = false;
            if (attraction != null)
            {
                Attractions.Remove(attraction);
                try
                {
                    SaveChanges();
                    succes = true; 
                }
                catch (Exception e)
                {
                    Logger.LogError($"Exception removing attraction! Exception: {e.ToString()}", GetType(), $"DeleteAttraction(id: {id})");
                }
            }
            return new Tuple<bool, byte>(succes, (byte)ModelType.Model);
        }

        public virtual Tuple<bool, byte> DeleteFood(int id)
        {
            Food food = Foods.SingleOrDefault(w => w.ID == id);
            bool success = false;
            if (food != null)
            {
                if (food.Animals.Count > 0)
                    return new Tuple<bool, byte>(false, (byte)ModelType.Animal);
                Foods.Remove(food);
                try
                {
                    SaveChanges();
                    success = true;
                }
                catch (Exception e)
                {
                    Logger.LogError($"Exception removing food! Exception: {e.ToString()}", GetType(), $"DeleteFood(id: {id})");
                }
            }
            return new Tuple<bool, byte>(success, (byte)ModelType.Model);
        }

        public virtual Tuple<bool, byte> DeletePlace(int id)
        {
            Place place = Places.SingleOrDefault(p => p.ID == id);
            byte errors = (byte)ModelType.Model;
            bool success = false;
            if (place != null)
            {
                if (place.Animals.Count > 0)
                    errors |= (byte)ModelType.Animal;
                if (place.Attractions.Count > 0)
                    errors |= (byte)ModelType.Attraction;
                if (place.Workers.Count > 0)
                {
                    errors |= (byte)ModelType.Worker;
                    return new Tuple<bool, byte>(false, errors);
                }
                Places.Remove(place);
                try
                {
                    SaveChanges();
                    success = true;
                }
                catch (Exception e)
                {
                    Logger.LogError($"Exception removing place! Exception: {e.ToString()}", GetType(), $"DeletePlace(id: {id})");
                }
            }
            return new Tuple<bool, byte>(success, errors);
        }

        public virtual Tuple<bool, byte> DeleteWorker(int id)
        {
            Worker worker = Workers.SingleOrDefault(w => w.ID == id);
            bool success = false;
            if (worker != null)
            {
                if (worker.Attractions.Count > 0)
                    return new Tuple<bool, byte>(false, (byte)ModelType.Attraction);
                Overtimes.RemoveRange(worker.Overtimes);
                Workers.Remove(worker);
                try
                {
                    SaveChanges();
                    success = true;
                }
                catch (Exception e)
                {
                    Logger.LogError($"Exception removing worker! Exception: {e.ToString()}", GetType(), $"DeleteWorker(id: {id})");
                }
            }
            return new Tuple<bool, byte>(success, (byte)ModelType.Model);
        }

        public List<T> GetModels<T>() where T : ZooDataModel
        {
            return new List<T>(Set<T>());
        }
    
        public virtual DbSet<Animal> Animals { get; set; }
        public virtual DbSet<Attraction> Attractions { get; set; }
        public virtual DbSet<BalanceType> BalanceTypes { get; set; }
        public virtual DbSet<CashBalance> CashBalances { get; set; }
        public virtual DbSet<Food> Foods { get; set; }
        public virtual DbSet<Overtime> Overtimes { get; set; }
        public virtual DbSet<Place> Places { get; set; }
        public virtual DbSet<Worker> Workers { get; set; }
    }
}
